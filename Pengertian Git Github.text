VCS (Version Control System) adalah sistem yang menyimpan dan mengelola rekaman perubahan dari source code
GIT adalah salah satu software yang bisa melakukan VCS
Github adalah layanan cloud/website untuk mengelola project GIT

Three State pd git
1. modified = kita mengubah,menambah,mengedit,menghapus file,namun belum kita tambahkan ke repo
2. staged = menandai file yg telah kita modifikasi dan akan kita simpan ke dalam repo secara permanent (git add .)
3. commited = data sudah aman disimpan ke dalam repo (git commit -m "")

1. HEAD
 - Merupakan pointer menuju hash yg paling akhir (perubahan yg pling akhir)
 - karena kdang sangat menyulitkan jika harus menuliskan hash value,jika kita akan menuju hash yg paling baru,kita bisa gunakan HEAD
 
2. DELETE FILE
  - Delete langsung pd local
  - mka jika git status maka otomatis akan melakukan perubahan
  - lakukan git add .
  - git commit -m ""
  - untuk konfirmasi/memberitahu pd repo

3. AMEND COMMIT
 - kadang saat kita melkukan commit,ada beberapa hal yg terlupakan
 - biasanya kita melakukan reset soft ke commit,lalu tambahka perubahan yg terlupakan,lalu commit ulang
 - Hal tersebut bisa dilakukan tanpa manual melakukan reset,caranya bisa menggunakan 
 - git commit amend -m""
 - perintah diatas akan mengubah commit sebelumnya,tidak membuat commit baru melainkan mengubah 
 - amend akan mengubah hast commit karena data perubahan yg dicommit berubah
 
 4. VERSI SEBELUMNYA
 - Git memiliki fitur dimana kita bisa melihat versi file pd commit sebelumnya
 - saat kita ambil versi file sebelumnya,file pd commit tersebut akan berada di staging index
 - untuk melakukan kita bisa gunakan
 - git checkout hash(7Digit) namafile
 - jika ingin menambhakan maka gunakan git add
 - jika tdk dan ingin kembali git restore --staged namafile (kita pindah ke working area terlebih dahulu)
 - git restore namafile
 
 5. SNAPSHOT SEBELUMNYA
 - Git juga memiliki fitur seperti mesin waktu,dimana kita bisa kembali pd snapshot sebelumnya
 - kita bisa tentukan kemana tujuan snapshot kita,dengan menggunakan hash commit
 - gunakan oerintah
 - git checkout hash(7Digit) (lngsung diarahkan ke code editor) 
 - jika ingin menambahkan perubahan gunakan git add . dan git commit -m ""
 - Dan jika ingin kembali ke commit paling awal,kita bisa gunakan perintah git checkout namabranch
 
6. REVERT COMMIT
 - Git memiliki fitur revert commit,yaitu fitur untuk membatalakan commit yg sudah kita lakukan,dengan cara membuat commit baru yg membatalkan commit sebelumnya
 - misal,kita sudah melakukan commit data perubahan dari text angger menjadi vindi,jika kita revert sevara otomatis akan membuat commit baru dengan melakukan perubahan dari vindi ke angger (MELAKUKAN KEBALIKAN DARI COMMIT YG KITA LAKUKAN)
 - untuk melakukan revert commit,gunakan perintah
 - git revert hash(7digit) (buka text editor) biasa digunakan untuk rename file
 
 7. BLAME
  - saat kita menambahkan kode program,kadang kita ingin tahu siapa yg menambahkan baris kode program
  - Git memiliki fitur yg bernama blame,ini digunakan untuk mencari tahu siapa yg menambah perubahan pd file dan juga untuk mengetahui commitnya
  - gunakan perintah 
  - git blame namFile
  - jikam ingin melihat lebih detail  git show hash(yg ada diGitBlame)
  
8. ALIAS
 - Git memiliki fitur yg bernama alias
 - dengan alias,kita bisa menambah nama perintah lain untuk perintah yg sudah ada di git
 - misal kita bisa menambah perintah graph yg sudah kita buat sendiri
 - 
 - alias hanya akan berlaku pada saat membuka gitbash saat itu,jika kita close maka kita alias sebelumnya tdk bisa dijalankan
FILE yag disimpan dalam github max 500mb

9. Istilah pada Git
  a. repo folder project kita 
  b. commit = rekaman atau snapsot dari repo kita
    commit dilakukan stelah kita membuat dan melakukan perubahan pada source code sebelumnya
  c. hash = penanda unik pada sebuah commit (hash berbentuk string random)
  d. checkout = berpindah ke sebuah commit
  e. branch = cabang bebas dari sebuah commit
    Brancing biasanya dilakukan saat
    - Membuat git branch
    - Membuat snapshot(perubahan source code) tanpa mengganggu jalur utama(branch master)
    - Fitur experimental
    - 2 orang mengerjakan repo yang sama  
  f. Merge
    Menggabungkan commit dari branch kembali ke branch master
   Recap Materi Branc da Merge
    - Branch = jalur development bebas dari sebuah commit (percabangan)
    - Checkout = berpindah ke branch / commit yang lain
    - pull request = meminta pemilik repo untuk MENGAMBIL perubahan yang telah kita lakukan
    - Merge = menggabungkan 2 buah branch 
    - Merge conflict = muncul saat baris yang sama diubah oleh 2 branch yg berbeda,kita harus solving memilih salah satu perubahannya
    
10. FORK/Forking
    - membuat copy/duplikat dari repo orang lain(beserta historinya)
    - jembatan antara repo original dan duplikatnya
    - modifikasi terhadap repo original milik orang lain yang kita gunakan,tanpa mengganggu/mengganti repo originalnya
    - Berkontribusi terhadap repo orang lain (pull request)
    - Fork tdak sama dengan Clone
    
11. BEKERJA DENGAN GIT
  Perintah yang ada di gitbash
  a. git = memberikan rangkuman perintah/perintah yg ada di gitbash(githelp)
  b. clear = akan menghilangkan isi dari terminal
  c. git --version = untuk mengetahui versi git
    A. git commend local
    1. git init = digunakan untuk mengisialisasi repo git pada computer kita
    2. git add namaFile = untuk menambahka file ke staging area
    3. git status = untuk mengetahui status repo kita (misal ada filebaru atau tidak,file terhapus dll)
    4. git commit -m= untuk melakuka commit
    5. git config = untuk configurasi pada git 
    6a. git branch namaBranch=  untuk membuat branch
    6b. git branch 
    7. git rm --cached = untuk merove file saat stagging area dan tidak jadi commit
    8. git commit -m"pesan commit"
    9. git log = untuk melihat history comit yang pernah kita lakukan
    9a. git log --oneline = untuk melihat history teteapi ditampilka secara simpel didalam satu baris
    10. git log -3 = untuk melihat 3 history commit terakhir
    11. git log --namaFile = untuk melhat perubahan secara spesifik pd file tertentu
    12. git checkout kodeHash5digit -- namafile = untuk mengembalikan perubahan commit ,misal file yg terhapus 
        misal git checkout 1b23v -- style.css ,Dan hasilnya akan ke staging area ,kita perlu commit 
     13. q = untuk quit ,digunakan setelah melkaukan perintah git log
     14. git config --list --show-origin = digunakan untuk mnegecek ada konfigurasi apa saja pd git
     15. git diff = digunakan untuk mengetahui perubahan file dalam suatu repo
     16. git clean -f = digunaka untuk menghapus penambahan file pd working area (hasilnya file akan dihapus)
     17. git restore namfile = digunakan untuk membatalkan perubahan pd file dan digunakan untuk membatalkan saat menghapus file (posisi file masih berada di working area)
     18. git restore --staged namafile = digunakan untuk memindahkan file yg di staging area ke working area (digunakan biasanya saat kita tdk jadi menghapus file
          dan mengubah file,kita hnya dapat mengubah di working area,jika kita terlanjut menambahkan ke staging area,maka gunakan perintah ini untuk kembali ke working area)
     19. git alias graph="git log --all --decorate --oneline --graph" = digunakan untuk membuat alias perintah grap (perintah graph untuk melihatkan hubungan commit sebelum dan sesudahnya)
     20. git show hash7Digit = digunakan untuk melihat detail,kita melakuka perubahan apa dalam file tersebut 
     21a. git diif hash1(7digit) hash2(7digit) = digunakan untuk melakukan perbandingan commit
     21b. git difftool hash1(7digit) hash2(7digit) = digunakan untuk melakukan perbandingan commit (menampilka dalam terminal vs code)
     22. git branch --show-current = untuk mengetahui ada berapa branch pd repo kita
     23. 
      
  d. pwd = untuk mengetahui anda berada diderectory mana
      - untuk membuat folder menjadi repo git kita perlu masuk kedalam foldernya 
      - untuk mengethui didalam folder ada file apa saja gunakan perintas ls
      - masuk folder dengan, cd namaFolder
      - setelah masuk folder,maka perintah git init untuk menjadikan folder local menjadi git repo
      - jika berhasil maka akan muncul brand (master)
      - buka folder didalam text editor
      - membuat file (html,css,js,dll)
    B.  - supaya git mengenali perubahan source code yg ada didalam repo,kita perlu melakukan
        1. ketik git status untuk mngetahui ada perubahan file apa saja
        2. tambahkan file ke staging area,dengan ketik add file namaFile atau bisa saja dengan add file . (semua file yg akan kita tambahkan ke stagging area)
        3. jika kita sudah terdaftar maka kita bisa commit,jikabelum kita perlu memasukkan name dan email menggunakan perintah git commit
        4. git commit -m"beri keterangan commit"
        5. untuk mengetahui commit kita berhasil atau tidak,ketik git status jika keterangan NOTHING TO COMMIT,WORKING TREE CLEAN ,maka artinya commit berhasil
        6. lakukan langkah 1 - 5 untuk setiap melakukan commit
        7. jika git status modified bukan untracked gita bisa langsung commit dengan menggunakan perintah
        git commit -am"penjelasan commit"
        
12. MELAKUKAN BRANCH DAN MERGE PADA GIT
   A1. BRANCH
    perintah yang dapat digunakan pada gitbash
    a. git branch = untuk menengetahui terdapat branch apa saja pd git
    b. git brach namaBranch = untuk membuat branch baru (misal git branch dosen) artinya kita emaut branch dosen.
    c.git checkout namaBranch = untuk berpindah branch (misal gitcheckout dosen) artinya kita kan berpindah ke branch dosen.
    d. git log --all --decorate --oneline --graph = untuk melihat history dalam bentuk graph
    e. alias = untuk membuat perintah kita sendiri yang isinya didalam adalah perintah bawaan dari gitbash,misal saat kita ingin melihat graph kita harus mengetik perintah yg lumayan panjang,kita bisa membuat perintah dengan kata kita sendiri dengan : 
    alias graph="git log --all --decorate --oneline --graph" untuk memanggil kita ketik graph
    f. git merge namaBranch = untuk menggabungkan branch
    g. git branch --merged = untuk mengetahui branch apa saja yang telah dimerge(digabung)
    h. git branch -d namaBranch = untuk menghapus branch yg telah dimerge dan tidak digunakan lagi (pastikan kita tdk dalam branch yg mau dihapus)
    i. git branch -D namaBranch = untuk menghapus branch walaupun branch tersebut belum digunakan (pastikan kita tdk dalam branch yg mau dihapus)
    j. git branch -m "namaBranchbaru" = untuk merename branch (pastikan kita dalam branch yg mau direname)
    
   B2. MULTIPLE BRANCH
    - pada kenyataannya dalam develop aplikasi kita membuat branch yg sangat bnyak
    - git menangani dengan baik,walaupun kita membuat branch yang sangat banyak
    
  
  13 . MERGE 
     - Merge adalah proses dimana kita melakukan penggabungan dua buah branch
     - Merge biasanya dilakukan setelah kita selesai membuat kode program disebuah branch,da ingin menggabungkan fitur tersebut ke branch lain
       misal ke branch utama
     - saat kita melakukan merge ,branch tdk akan di hapus ,artinya kita masih bisa melakukan commit dibranch yg ada
     - perhatikan  flow commit master,saat kita membuat banyak
     - kita bisa melakukan branch cabang dengan branch cabang,tdk harus cabang dengan master
     - dan pastikan jika kita ingin ngemerge dengan branch lain,kita berada di branch diluar dari branch yg kita tuju
     - misal,kita saat ini ada dibranch master
     - git merge feature
     - maka branch feature akan dimerge dengan brand master
    membuat BRANCH dan MERGE
    branch yg aktif ditandai dengan adanya tulisan HEAD
    1. membuatt repo
    2. membuat branch baru
    3. masuk branch baru dengan perintah git checkout namabranch
    4. edit branch baru sesuai dengan kebutuhan
    5. ingat jika berpindah ke branch master isi dari branch baru tidak akan ikut berpindah
    6. jika ingin berpindah maka kita MERGE
    7. untuk melakukan MERGE ,pastikan kita berada pada branch MASTER
    8. ketik perintah git merge namaBranch
    
  A1.  MENGATASI GIT MERGE CONFLICT
      Terjadi karena 2 branch mengerjakan baris yang sama dalam 1 repo,jika pada branch melakukan perubahan pada baris yang sama,maka akan terjadi conflick,jika tidak maka data akan update
      - Dalam pembuatan aplikasi,biasanya programmer akan melakukan penambhan kode program direpo secara pararel
      - biasanya tipa programer akan membuat branch masing-masing
      - dan tdk bisa dihindari,kadang programer akan melakukan perubahan pada kdoe file yang sama dibranch yang berbeda
      - dan biasanya ketika melakukan merge,akan terjadi yg namanya conflict
      - hal ini disebabkan,satu file diubah dibranch yg berbeda,sehingga ketika dimerge,kita perlu melakukan yg namanya merge conflict
      
    A2.  MEMBATALKAN CONFLICT
      - jika terjadi conflict maka kita wajib  memperbaikinya terlebih dahulu
      - semua perubahan yg tdk konflik akan secara otomatis berada di staging index
      - sedangkan perubahan yg konflik secara otomatis akan berada di working area
      -  jika kita ingin membatalkan merge,kita bisa gunakan perintah
      - git merge --abort
      - secara otomatis semua perubahan  dibranch yg ingin kita merge  akan dihapus
      
   A3.   MEMPERBAIKI CONFLICT
     cara mengatasi
     1. kita bisa memilih bagian mana saja yang aka kita ambil
     2. yang warna hijau adalah branch yg aktif,sedangkan yg warna biru adalah branch yg akan dimerge
     3. lakukan git add . agar masuk ke staging area
     4. lakuka git commit -m "" agar disimpan didalam repo
     
14.   MELAKUKAN CHECKOUT KE SEBUAH COMMIT
    1. Dilakuka untuk mundur beberapa commit
    2. lakukan git log untuk mengetahui hash pd saat commit
    3. ambil hast 7 digit pd commit yg kita ingin masuki
    4. git checkout hast7digit
    5. artinya head akan lepas pd branch,dan head akan mengacu pada commit yg mempunyai hast7digit pd saat kita melakukan git checkout
    6. dalam keadaan ini kita bisa membuat branch baru,mengedit isi file dll
    7. jikakita ingin membuat branch baru maka kita perlu melakukan,membuat branch baru da masuk denga perintahgit checkout brancBaru
    8 . untuk kembali ke posisi semula maka gunakang git branch master
    9. jika ingin menyimpan perubahannya,maka anda harus membuat branch baru untuk menyimpan perubahan dan saat melakukan perubahan branch
        anda akan mendapatkan hash untuk menambahkan pada akhir branch,jika file yang anda rubah mengerjakan baris yang sama terhdap brand master akan 
        menjadi merge conflict,anda harus resolve manual
    
 15. CHERRY-PICK
  -Kadang ada kasus,ketika kita membuat kode program disebuah branch kita ingin melakukan merge,namun tdk ingin melakukan merge semua branchnya,mungkin haya sebagian commit saja
  - cherry-pick merupakan fitur yang digunakan untuk mengambil commit dari branch manapun dan kita merge ke dalam branch saat ini
  - ketik git cherry-pick hash7DigitCommitPdBranchYgDituju
        
16. GIT REMOTE
     - Saat nanti kita bekerja dengan tim atau berkolaborasi ,kita tdk hanya akan memnyimpan git repo pada satu komputer saja
     - Tiap anggota mungkin akan mengcopy git repo yang kita buat,dan juga melakukan kontribusi ke ke git repositorya saja 
     - Karean git meripakan distributed version control,walaupun kita gunakan git server tapi kita tidak wajib terkoneksi ketika ingin mengelola git repo
     - hanya ketika ingin mengirim perubahan atau mengambil perubahan,baru kita butuh terkoneksi ke git server
   16A. perintah yg bisa digunakan
    - git clone namaUrl = untuk mengarahkan folder tersebut aka mengeclone sesuai dengan namaUrl yg ada di github
    - git remote = untuk mengetahui apakah sudah terhubung dengan repo yg ada digithub ,jika keterangan ORIGIN maka sudah terhubung
    - git remote -v = untuk mngetahui remote kita terhubung dengan akun repo github siapa
    - git push = untuk mendorong branch,biasa dilakukan untuk mendorong branck remote agar sejajar dengan branch local,saat branch local mengalamai perubahan
    - git fetch = untuk mengetahui perubahan apa saja yg ada diremote
    - git pull = untuk mengambil perubahan yg ada diremote agar dilocal ikut berubah
    
    16B. GIT SERVER
          - Git server adalah server yg bsa kita gunakan untuk menyimpan repo git yg sudah jkita buat dilocal 
          - Ada bnyak sekali git serveryg tersedia ,baik itu yang gratis atau ataupun berbayar,contoh git server (github,gitlab,gitbucket)
          - Kelebiha ika menggunakan git server adalah data repo aman tersimpan di server,sehingga jika kita hapus git repo yg dilocal,repo akan tetap aman diserver
     
     16C. GIT SERVER REPOSITORY 
         - Tiap git server biasanya memiliki fitur membuat git repo
         - todak wajinb kita harus membuat git repo dilocal dulu,ataupun membuat gi repo di git server
         
      16D. SSH
          - ssh adalah singkatan dari Secure Shell
          - sshmerupakan protokol jaringan untuk komunikasi jaringan yang aman danterenskripsi
          - ssh merupakan aplikasi berbasis terminal
          - ketika kita menginstal git,secara otomatis git akan menginstal ssh juga
          
       16E. GIT SSH
            - Git sendiri melmiliki bebrapa mekanisme untuk berkomunikasi dengan git server,seperti http atau ssh
            - hal ini karena ssh merupakan protokol yg direkomendasika ketika berkomunikasi dengan git server
            1. SSH KEY
               - Hal pertama yg perlu kita lakukan ketika menggunakan shh adalah,membuat ssh key
               -ssh merupakan kunci yg bisa digunakan untuk autentikasi ke ssh server 
               - untuk membuat ssh key,kita bisa gunakan perintah
               - ssh--keygen diterminal
               - lalu buat password
               - setelah selesai ,maka secara otomatis aka terdapat 2 key dilocal,yaitu private dan public
               - kita  bisa melihatnya didalam folder .ssh dihome directory kita
               - file id_rsa adalah private key
               - file id.rsa_pub adalah public key
            
            2. MENAMBAH SSH PUBLIC KEY DI GITHUB
                - Setelah kita membuat ssh key,selajutnya kit perlu meregritrasikan ssh public key github 
                - hal ini dilakukan,agar ketika nanti terkoneksi di git server digithub,kita tdk perlu melakukan autentikasi lagi
                - ubah pd github.com/settings/keys
                
            3. TES SSH KE GITHUB
               - selanjutnya untuk memastikan apakah kita sudajh bisa terkoneksi ke github mengguakan ssh kita bisa gunakan perintah
               - ssh -T git@github.com
               - jika berhasil maka akan muncul username kita yg ada diakun github
               
       16F. REMOTE REPOSITORY
           - Ketika kita menggunakan git project secara default,git tdk tahu tentang remote repository
           - kita perlu memberi tahu ke git project yg sudah kita buat tentang lokasi git repo
           1. MENAMBAH REMOTE REPOSITORY
               -  untuk meambahkan remote repo,kita bisa gunakan perintah
               - git remote add namaRemote namassh-url-yg-kita-peroleh-di-repo-git-server
               -kebanyakan kita menamakan git remote dengan nama origin(terserah mau menamakan apa saja)
               - git remote get-url namaRemote = digunakan untuk mengetahui nama url
            2. MENGHAPUS REMOTE REPOSITORY
               - Untuk menghapus remote repo,kita bisa gunakan perintah
               - git remote rm namaRemote
               
      16G. PUSH
            - walaupun kita sudah menyimpan perubahan digit project local tapi kita tidak secara otomatis akan sync dengan remote repo
            - oleh karena itu,jika kita ingin mengirim perubahan yg terjadi di git project di local kita,kita perlu mengirim secara manual ke git server
            - untuk mengirim perubahan di local ke git server ,kita bisa gunakan perintah
            - git push namaRemote namaBranch
           1. PUSH BRANCH
              - Untuk mengirim perubahan branch ke remote repo dengan nama branch sama
              - git push namaRemote namaBranch
              - untuk mengirim perubahan branch ke remote repo dengan nama branch yg berbeda,kita bisa gunakan perintah
              - git push namaRemote localbranch:remotebranch
              - dilakukan jikanambranch local da remote berbeda
              
           2. PUSH SEMUA BRANCH
               - jika kita ingin mengirim semua perubahan disemua branch ke remote repo,kita bisa gunkan perintah
               - git push origin --all
               - digunakan juga ketika kita dilocal melakukan perubahan dibranch(selain master),agar repo remote ikut berubah
               
           3. MENGHAPUS BRANCH (branch pd remote)
             - perintah push juga bisa digunakan untuk menghapus branch yg ada diremote
             - kita bisa gunakan perintah 
             - git push --delete namaRemote namabranch
             - PERLU DIINGAT, menghapus remote branch bukan berarti menghapus branch dilocal,jika kita ingin menghapus dilocal,kita harus lakukan secara manual
           
      16H. CLONE
        - melakukan download projet git yg ada di server
        denga perintah git clone
        - kita bisa sownload project diremote repo ke local dan secara otomatis didownload sebagai project
        1. MELAKUKAN CLONE
          - Untuk melakukan clone,kita bisa gunakan perintah
          - git clone urlRemote
          - secara default clone akan membuat project dengan nama folder sama dengan nama project yg ada diremote
          - jik kita ingin melakukan clone,dengan nama folder yg berbeda dengan nama project remote,kita bisa gunakan perintah
          - git clone urlRemote namaFolder
          
         2. DEFAULT HASIL CLONE
           - Default clone nama remote nya dalah origin
           - dan akan berisi branch utama di remote repo
           - branch yang lain tidak akan didownload
           
         3. 
             
         
    
17.   MELAKUKAN CLONE
      - Buat folder untuk menampung repo (folder penampung jngan dibuat repo)
      - git clone urlRepoGitYgAdaDiGithub
      - masuk kedalam repo yg telah diclone
      - jika ingin mengedit repo,pastikan kita membuatbranch baru untuk melakukan perubahan
      - jika perubahan sudah fiks untuk digunakan,maka gunakan git merge
      - lakukan git push -u origin untuk melakukan perubahan repo yg ada digithub
      - 
    
    aRTINYA REPO KITA DISIMPAN KEDALAM GITHUB 
    jika kita menggunakan git remote artinya kita menduplikat repo kita dan disimpan kedalam github ataupun sebaliknya
   
 18. KETIKA PADA GITHUB KITA SUDAH MEMPUNYAI REPO,DAN DI KOMPUTER LOCAL KITA BELUM MEMPUNYAI,Maka kita dapat menduplikat repo yang ada digithub dengan cara (Cloning)
    - memuat repo baru pd github
    - pastikan click readme
    - click clone or download
    - pilih yang https copy url nya
    - pilih folder / buat folder di komputer local untuk menyimpan hasil cloning dari repo yang ada digithub
    - git clone namaUrl  artinya repo yg ada digithub kita cloning (membuat kemabaran)
    - buka file di code editor
    - masuk ke folder sesuai yg ada di repo github
    - git remote (untuk mngetahui apakah sudah berhasil clone repo yg ada di github)
    - cek git status ,jika berhasil maka akan menampilkan keteranga UP TO DATE yg artinya branch local sama dengan branch oringin/master(beranch yg ada diremote)
    - jik pada local melakukan perubahan / commit
    - cek git status untuk mngetahui apakah branch pada local atau pd remote sudah sejajar
    - jika belum pd local ketik git push untuk mendorong agar branch yg da diremote sejajar dengan branch local
    - cek status dan graph untuk emmantau perubahan ,dan refresh github
    
 19 . KETIKA KITA PUNYA REPO DILOCAL DAN KITA INGIN COMMIT DAN MASUKKAN REPO KE DALAM GITHUB (Remote)
- buat folde di local dan jadikan repo 
- buat repo di github 
- pastikan jangan diclick readme nya
- sesuaikan dengan quick setup
- menambahkan remote ke gitbash (sudah ada di quick tip)
- lakukan git fetch untuk mengecek perubahan yg ada di remote

20. KETIKA TERJADI CONFLICK LOCAL DAN REMOTE
    Terjadi jika pada local dan remote melakuka perubahan dibaris yang sama
   - gunakan git fetch untuk mengetahui sudah sampai mana commit yg ada di remote
   - git status untuk mengetahui keterangan
   - git pull untuk menarik perubahan yg ada diremote ke local
   - jika tdk dipull maka pada graph akan melakukan branch,
   - setelah conflick selesai maka gunakan perintah git push agar branch local dan remote sejajar
   
 21. GITHUB PAGES
    Memanfaatkan github untuk menghosting web statis (web yg tdk memilik data base)
  1. buat repo pada github
  2. pada saat membuat repo dibelakang harus diberi nama github.io
  3. tdk usah click readme
  4. buat repo pd local untuk remote repo yg ada digithub
  5. check pd github, bagian setting pilih fitur pages ,lalu ubah none menjadi master/main lalu save ,refresh, maka github akan menampilkan url hostingnya 
  6. Dan jika ingin melakukan perubahan maka,kita commit ke local lalu ketik git push ,agarrepo yg ada digithub akan ikut berubah
  
 22. REMOTE MULTIPLE
      Biasa digunakan untuk kolaborasi team,Agar repo yg ada digithub dilocal dan digithub orang lain yg reponya kita fork sinkron (berintegrasi)
      Misal kasus kita ingin mnengambil repo  orang lain(fork) dan clone ke komputer kita (local) dan di akun github kita
      BERLAKU JIKA REPO SUMBER MELAKUKAN PERUBAHAN,MAKA OTOMATIS REMOTE AKAN MAJU 1 COMMIT DARI REPO LOCAL DAN GITHUB KITA
      - lakukan fork untuk mengambil repo orng lain dan clone ke akun github kita
      - pada local buat  folder (folder saja jngan dibuat repo)
      - ketik git clone urlNamaRepoYgAdaDiGithubKita hasil dari fork
      - setelah file terdownload,ketik ls untuk mengetahui isi folder
      - masuk ke repo cd namaRepo (jika masuk berhasil maka akan masuk ke repo dengan branch master)
      - jika clone berhasil,maka kita cek remote terlebih dahulu
      - ketik git remote , jika remotenya origin maka clone berhasil,karena jika kita clone maka remote secara default kita adalah origin,dan remote mengacu pd akun  github kita
      - ketik git remote -v ,aka mengecek remotenya connect ke akun siapa
      - dan artinya jikakita melakukan perubahan di local ,maka yg akan berubah hnya repo yg ada digithub kita saja,repo aslinya tdk akan berubah
      - JIKA KITA INGIN UP TO DATE DENGAN REPO ASLINYA ( artinya jika repo sumber berubah,repo yg ada digithub dan local kita ikut berubah) kita harus
      - membuat remote yg urlnya ditujukan kepada url repo yg kita fork (repo sumbernya)
      - ketil git remote add namaRemoteSumber(nama terserah) urlRemoteSumber (copas pd github)
      - cek git remote -v , untuk mngetahui remote ke mana saja
      - ketik git fetch namaRemoteSumber untuk mngetahui history commit dari akun sumbernya ,dan agar saat kita graph branch sejajar
      - jika pd repo sumber berubah dan pada repo github ataupun local kita juga ikut berubah,maka gita harus merge git local kita ke git repo sumber (lakukan git fetch namaRemoteSumber untuk mengecek perubahan yg ada direpo sumber)
      - lalu ketik git status untuk mngetahui pesan
      - jika ada perubahan di repo sumber,maka git remote akan berada diatas remote local da github
      - jika ingin remote sejajar, maka 
      - git merge namaRemoteSumber/master (artinya kita akan menggabungkan remote yg ada dilocal dengan remote yg mengacu repo sumber) 
      - local ditandai dengan namaBranch(master) saja, tidak ada nama remotenya
      - agar repo yg ada digithub kita ikut berubah maka kita 
      - ketik git push -u origin master 
    
  23.  JIKA YANG MENJADI REMOTE ADALAH REPO YANG ADA DIGITHUB KITA
          - maka jika kita ingin mengecek perubahan yg ada pd repo github
          ketik git fetch
          - jika DIDALAM REPO GITHUB melakukan perubahan maka,kita harus
          - ketik git pull,agar repo local kita maju,agar sejajar
          - DAN JIKAKITA MELAKUKA PERUBAHAN YANG ADA DILOCAL
          - ketik git push ,agar repo yg ada digithub ikut berubah
          
  24. PULL REQUEST
          Biasa dilakukan jikakita melakukan perubahan repo hasil fork dari repo orang lain,dan kita ingin mengajukan perubahan yg ada direpo local atau github kita ke repo sumber
          JIKA kita ingin melakukan perubahan pada repo hasil fork,MAKA kita jngan melakukan perubahan pada branch master,kita mengubah dibranch lain,agar branch master kita tetap utuh,dan jika perubahan kita  sudah fiks ingin dimasukkan ke branch master maka gunakan git merge dan kita melakukan pull request menggunakan branch lain yg telah kita buat(agar isi dr branch master utuh)
          - buat branch baru , git branch namaBranchBaru
          - pindah branch, git checkout namaBrancBaru
          - lakukan perubahan-perubahan atau menambah file pd branch namaBranchBaru
          - dengan melakukan perubahan,maka repo yg ada dilocal maju satu commit
          - agar repo yg ada digithub juga maju 1 commit,
          - git push origin namaBrancBaru,origin akan mengacu repo yg ada digithub (karena remote yg ada digithub bernma origin) 
            karena kita membuat branch baru,kita tidak push ke branch master (jika berhasil maka di github akan muncul button pull request), setelah itu
          - kita usulkan perubahan yg ada di brachBaru ke repo sumber
          - lakukan pull request menggunakan github,karena pull request adalah fitur yg dimiliki oleh github
          - pindah branchBaru,lakuka pull request
          - dan jika perubahan kita disetujui oleh pemilik repo master
          - kita fetch namaRemotePemilikRepoSumber , untuk mengetahui apakah diterima atau tidak pengajuan pull request kita
          - jika diseteujui,kita pindah ke branch master
          - lalu lakukan git merge namaRemoteRepoSumber/master, maka repo local kita akan update sesuai dengan repo sumber
          - ketik git push origin master, agar repo yang ada digithub update sesuai dengan repo local ata repo sumber
          
 25 . GITIGNORE
    gitignore adlah sebuah file yg bisa kita simpan kedalam repo kita (local maupun remote(menggunakan github)) agar kedepannya,saat kita melakukan add dan commit(perubahan source code) ,ada file yg kita daftarkan ke file.gitignore agar saat melakuka commit ataupun add file yg telah didaftarka ke .gitignore tidak ikut berubah
  misal
     - agar file system tdk ikut berubah jika kita melakukan add dan commit
     - didalam repo kita terdapat konfigurasi pd local (komputer kita),
   A1. CARA MEMBUAT FILE GITIGNORE SECARA MANUAL
   - kita buat dilocal 
   - di vs code buat file .gitignore
   - didalmnya kita bisa mendaftarkan file,folder
   - jika file (namafile.ekstensi)
   - jik folder (namfolder/)
   - atau jika semua file dan ekstensi (*.namaekstensi)
   - setelah kita membuat file .gitignore maka file yg didaftarkan ke dala file .gitignore tdk akan muncul diremote (repo github)
   
  A2. CARA MEMBUAT FILE GITIGNORE PD GITHUB
    - kita bisa membuat langsung digithub,saat kita membuat repo pd github
    
   - website referensi file gitignore diisi apa (github.com/github/gitignore)
   (gitignore.io) sesuaikan dengan framework yg kita pakai
       
26. REBASE
   - Rebase sering digunakan jika kita berkolaborasi dengan team (dengan rebase akita kaa memudahkan melakuka tracking)
   - selalu buat branch baru ,agar brand master tidak akan terganggu
   - sebelum melkuakn rebase ke remote master
   - lakukan git pull
   - lakukan perintah diatas dibranch master local kita
   - untuk mengetahui perubahan yg ada diremote master
   
   1. PERINTAH REBASE
      - git rebase namaBranchYgDituju
   - Work flow pada saat menggabungkan branch ada dua cara (merge dan rebase)
   - jika menggunakan REBASE,branch yg baru ketika akan dimerge dengan branch master(tdk harus dengan master) 
   - maka otomatis akan memposisikan commit yg paling akhir
   - dengan rebase maka akan melakuka fast-forward (tdk akan melakukan commit baru saat menggbungka branc)
    
   
