VCS (Version Control System) adalah sistem yang menyimpan dan mengelola rekaman perubahan dari source code
GIT adalah salah satu software yang bisa melakukan VCS
Github adalah layanan cloud/website untuk mengelola project GIT

A. Istilah pada Git
  1. repo folder project kita
  2. commit = rekaman atau snapsot dari repo kita
    commit dilakukan stelah kita membuat dan melakukan perubahan pada source code sebelumnya
  3. hash = penanda unik pada sebuah commit (hash berbentuk string random)
  4. checkout = berpindah ke sebuah commit
  5. branch = cabang bebas dari sebuah commit
    Brancing biasanya dilakukan saat
    - Membuat git branch
    - Membuat snapshot(perubahan source code) tanpa mengganggu jalur utama(branch master)
    - Fitur experimental
    - 2 orang mengerjakan repo yang sama  
  6. Merge
    Menggabungkan commit dari branch kembali ke branch master
   Recap Materi Branc da Merge
    - Branch = jalur development bebas dari sebuah commit (percabangan)
    - Checkout = berpindah ke branch / commit yang lain
    - pull request = meminta pemilik repo untuk MENGAMBIL perubahan yang telah kita lakukan
    - Merge = menggabungkan 2 buah branch 
    - Merge conflict = muncul saat baris yang sama diubah oleh 2 branch yg berbeda,kita harus solving memilih salah satu perubahannya
B. FORK/Forking
    - membuat copy/duplikat dari repo orang lain(beserta historinya)
    - jembatan antara repo original dan duplikatnya
    - modifikasi terhadap repo original milik orang lain yang kita gunakan,tanpa mengganggu/mengganti repo originalnya
    - Berkontribusi terhadap repo orang lain (pull request)
    - Fork tdak sama dengan Clone
    
 BEKERJA DENGAN GIT
  Perintah yang ada di gitbash
  1. git = memberikan rangkuman perintah/perintah yg ada di gitbash(githelp)
  2. clear = akan menghilangkan isi dari terminal
  3. git --version = untuk mengetahui versi git
    A. git commend local
    1. git init = digunakan untuk mengisialisasi repo git pada computer kita
    2. git add namaFile = untuk menambahka file ke staging area
    3. git status = untuk mengetahui status repo kita (misal ada filebaru atau tidak,file terhapus dll)
    4. git commit = untuk melakuka commit
    5. git connfig = untuk configurasi pada git 
    6. git branch =  untuk membuat branch
    7. git rm --cached = untuk merove file saat stagging area dan tidak jadi commit
    8. git commit -m"pesan commit"
    9. git log = untuk melihat history comit yang pernah kita lakukan
    10. git log -3 = untuk melihat 3 history commit terakhir
    11.  git log -- namaFile = untuk melhat perubahan secara spesifik pd file tertentu
    12. git checkout kodeHash5digit -- namafile = untuk mengembalikan perubahan commit ,misal file yg terhapus 
        misal git checkout 1b23v -- style.css ,Dan hasilnya akan ke staging area ,kita perlu commit 
     13. q = untuk quit ,digunakan setelah melkaukan perintah git log
  4. pwd = untuk mengetahui anda berada diderectory mana
      - untuk membuat folder menjadi repo git kita perlu masuk kedalam foldernya 
      - untuk mengethui didalam folder ada file apa saja gunakan perintas ls
      - masuk folder dengan, cd namaFolder
      - setelah masuk folder,maka perintah git init untuk menjadikan folder local menjadi git repo
      - jika berhasil maka akan muncul brand (master)
      - buka folder didalam text editor
      - membuat file (html,css,js,dll)
      - supaya git mengenali perubahan source code yg ada didalam repo,kita perlu melakukan
        1. ketik git status untuk mngetahui ada perubahan file apa saja
        2. tambahkan file ke staging area,dengan ketik add file namaFile atau bisa saja dengan add file . (semua file yg akan kita tambahkan ke stagging area)
        3. jika kita sudah terdaftar maka kita bisa commit,jikabelum kita perlu memasukkan name dan email menggunakan perintah git commit
        4. git commit -m"beri keterangan commit"
        5. untuk mengetahui commit kita berhasil atau tidak,ketik git status jika keterangan NOTHING TO COMMIT,WORKING TREE CLEAN ,maka artinya commit berhasil
        6. lakukan langkah 1 - 5 untuk setiap melakukan commit
        7. jika git status modified bukan untracked gita bisa langsung commit dengan menggunakan perintah
        git commit -am"penjelasan commit"
        
B. MELAKUKAN BRANCH DAN MERGE PADA GIT
    perintah yang dapat digunakan pada gitbash
    1. git branch = untuk menengetahui terdapat branch apa saja pd git
    2. git brach namaBranch = untuk membuat branch baru (misal git branch dosen) artinya kita emaut branch dosen.
    3.git checkout namaBranch = untuk berpindah branch (misal gitcheckout dosen) artinya kita kan berpindah ke branch dosen.
    4. git log --all --decorate --oneline --graph = untuk melihat history dalam bentuk graph
    5. alias = untuk membuat perintah kita sendiri yang isinya didalam adalah perintah bawaan dari gitbash,misal saat kita ingin melihat graph kita harus mengetik perintah yg lumayan panjang,kita bisa membuat perintah dengan kata kita sendiri dengan : 
    alias graph="git log --all --decorate --oneline --graph" untuk memanggil kita ketik graph
    6. git merge namaBranch = untuk menggabungkan branch
    7. git branch --merged = untuk mengetahui branch apa saja yang telah dimerge(digabung)
    8. git branch -d namaBranch = untuk menghapus branch yg telah dimerge dan tidak digunakan lagi
    9. git branch -D namaBranch = untuk menghapus branch
    
    membuat BRANCH dan MERGE
    branch yg aktif ditandai dengan adanya tulisan HEAD
    1. membuatt repo
    2. membuat branch baru
    3. masuk branch baru dengan perintah git checkout namabranch
    4. edit branch baru sesuai dengan kebutuhan
    5. ingat jika berpindah ke branch master isi dari branch baru tidak akan ikut berpindah
    6. jika ingin berpindah maka kita MERGE
    7. untuk melakukan MERGE ,pastikan kita berada pada branch MASTER
    8. ketik perintah git merge namaBranch
    
    MENGATASI GIT MERGE CONFLICT
      Terjadi karena 2 branch mengerjakan baris yang sama dalam 1 repo,jika pada branch melakukan perubahan pada baris yang sama,maka akan terjadi conflick,jika tidak maka data akan update
     cara mengatasi
     1. kita bisa memilih bagian mana saja yang aka kita ambil
     2. yang warna hijau adalah branch yg aktif,sedangkan yg warna biru adalah branch yg akan dimerge
     3. lakukan commit agar masuk ke staging area
     
   MELAKUKAN CHECKOUT KE SEBUAH COMMIT
    1. Dilakuka untuk mundur beberapa commit
    2. lakukan git log untuk mengetahui hash pd saat commit
    3. ambil hast 7 digit pd commit yg kita ingin masuki
    4. git checkout hast7digit
    5. artinya head akan lepas pd branch,dan head akan mengacu pada commit yg mempunyai hast7digit pd saat kita melakukan git checkout
    6. dalam keadaan ini kita bisa membuat branch baru,mengedit isi file dll
    7. jikakita ingin membuat branch baru maka kita perlu melakukan,membuat branch baru da masuk denga perintahgit checkout brancBaru
    8 . untuk kembali ke posisi semula maka gunakang git branch master
    9. jika ingin menyimpan perubahannya,maka anda harus membuat branch baru untuk menyimpan perubahan dan saat melakukan perubahan branch
        anda akan mendapatkan hash untuk menambahkan pada akhir branch,jika file yang anda rubah mengerjakan baris yang sama terhdap brand master akan 
        menjadi merge conflict,anda harus resolve manual
    
  
    
