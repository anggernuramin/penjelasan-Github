VCS (Version Control System) adalah sistem yang menyimpan dan mengelola rekaman perubahan dari source code
GIT adalah salah satu software yang bisa melakukan VCS
Github adalah layanan cloud/website untuk mengelola project GIT

FILE yag disimpan dalam github max 500mb

A. Istilah pada Git
  1. repo folder project kita
  2. commit = rekaman atau snapsot dari repo kita
    commit dilakukan stelah kita membuat dan melakukan perubahan pada source code sebelumnya
  3. hash = penanda unik pada sebuah commit (hash berbentuk string random)
  4. checkout = berpindah ke sebuah commit
  5. branch = cabang bebas dari sebuah commit
    Brancing biasanya dilakukan saat
    - Membuat git branch
    - Membuat snapshot(perubahan source code) tanpa mengganggu jalur utama(branch master)
    - Fitur experimental
    - 2 orang mengerjakan repo yang sama  
  6. Merge
    Menggabungkan commit dari branch kembali ke branch master
   Recap Materi Branc da Merge
    - Branch = jalur development bebas dari sebuah commit (percabangan)
    - Checkout = berpindah ke branch / commit yang lain
    - pull request = meminta pemilik repo untuk MENGAMBIL perubahan yang telah kita lakukan
    - Merge = menggabungkan 2 buah branch 
    - Merge conflict = muncul saat baris yang sama diubah oleh 2 branch yg berbeda,kita harus solving memilih salah satu perubahannya
B. FORK/Forking
    - membuat copy/duplikat dari repo orang lain(beserta historinya)
    - jembatan antara repo original dan duplikatnya
    - modifikasi terhadap repo original milik orang lain yang kita gunakan,tanpa mengganggu/mengganti repo originalnya
    - Berkontribusi terhadap repo orang lain (pull request)
    - Fork tdak sama dengan Clone
    
 BEKERJA DENGAN GIT
  Perintah yang ada di gitbash
  1. git = memberikan rangkuman perintah/perintah yg ada di gitbash(githelp)
  2. clear = akan menghilangkan isi dari terminal
  3. git --version = untuk mengetahui versi git
    A. git commend local
    1. git init = digunakan untuk mengisialisasi repo git pada computer kita
    2. git add namaFile = untuk menambahka file ke staging area
    3. git status = untuk mengetahui status repo kita (misal ada filebaru atau tidak,file terhapus dll)
    4. git commit -m= untuk melakuka commit
    5. git config = untuk configurasi pada git 
    6. git branch namaBranch=  untuk membuat branch
    7. git rm --cached = untuk merove file saat stagging area dan tidak jadi commit
    8. git commit -m"pesan commit"
    9. git log = untuk melihat history comit yang pernah kita lakukan
    10. git log -3 = untuk melihat 3 history commit terakhir
    11.  git log -- namaFile = untuk melhat perubahan secara spesifik pd file tertentu
    12. git checkout kodeHash5digit -- namafile = untuk mengembalikan perubahan commit ,misal file yg terhapus 
        misal git checkout 1b23v -- style.css ,Dan hasilnya akan ke staging area ,kita perlu commit 
     13. q = untuk quit ,digunakan setelah melkaukan perintah git log
  4. pwd = untuk mengetahui anda berada diderectory mana
      - untuk membuat folder menjadi repo git kita perlu masuk kedalam foldernya 
      - untuk mengethui didalam folder ada file apa saja gunakan perintas ls
      - masuk folder dengan, cd namaFolder
      - setelah masuk folder,maka perintah git init untuk menjadikan folder local menjadi git repo
      - jika berhasil maka akan muncul brand (master)
      - buka folder didalam text editor
      - membuat file (html,css,js,dll)
      - supaya git mengenali perubahan source code yg ada didalam repo,kita perlu melakukan
        1. ketik git status untuk mngetahui ada perubahan file apa saja
        2. tambahkan file ke staging area,dengan ketik add file namaFile atau bisa saja dengan add file . (semua file yg akan kita tambahkan ke stagging area)
        3. jika kita sudah terdaftar maka kita bisa commit,jikabelum kita perlu memasukkan name dan email menggunakan perintah git commit
        4. git commit -m"beri keterangan commit"
        5. untuk mengetahui commit kita berhasil atau tidak,ketik git status jika keterangan NOTHING TO COMMIT,WORKING TREE CLEAN ,maka artinya commit berhasil
        6. lakukan langkah 1 - 5 untuk setiap melakukan commit
        7. jika git status modified bukan untracked gita bisa langsung commit dengan menggunakan perintah
        git commit -am"penjelasan commit"
        
B. MELAKUKAN BRANCH DAN MERGE PADA GIT
    perintah yang dapat digunakan pada gitbash
    1. git branch = untuk menengetahui terdapat branch apa saja pd git
    2. git brach namaBranch = untuk membuat branch baru (misal git branch dosen) artinya kita emaut branch dosen.
    3.git checkout namaBranch = untuk berpindah branch (misal gitcheckout dosen) artinya kita kan berpindah ke branch dosen.
    4. git log --all --decorate --oneline --graph = untuk melihat history dalam bentuk graph
    5. alias = untuk membuat perintah kita sendiri yang isinya didalam adalah perintah bawaan dari gitbash,misal saat kita ingin melihat graph kita harus mengetik perintah yg lumayan panjang,kita bisa membuat perintah dengan kata kita sendiri dengan : 
    alias graph="git log --all --decorate --oneline --graph" untuk memanggil kita ketik graph
    6. git merge namaBranch = untuk menggabungkan branch
    7. git branch --merged = untuk mengetahui branch apa saja yang telah dimerge(digabung)
    8. git branch -d namaBranch = untuk menghapus branch yg telah dimerge dan tidak digunakan lagi
    9. git branch -D namaBranch = untuk menghapus branch
    
    membuat BRANCH dan MERGE
    branch yg aktif ditandai dengan adanya tulisan HEAD
    1. membuatt repo
    2. membuat branch baru
    3. masuk branch baru dengan perintah git checkout namabranch
    4. edit branch baru sesuai dengan kebutuhan
    5. ingat jika berpindah ke branch master isi dari branch baru tidak akan ikut berpindah
    6. jika ingin berpindah maka kita MERGE
    7. untuk melakukan MERGE ,pastikan kita berada pada branch MASTER
    8. ketik perintah git merge namaBranch
    
    MENGATASI GIT MERGE CONFLICT
      Terjadi karena 2 branch mengerjakan baris yang sama dalam 1 repo,jika pada branch melakukan perubahan pada baris yang sama,maka akan terjadi conflick,jika tidak maka data akan update
     cara mengatasi
     1. kita bisa memilih bagian mana saja yang aka kita ambil
     2. yang warna hijau adalah branch yg aktif,sedangkan yg warna biru adalah branch yg akan dimerge
     3. lakukan commit agar masuk ke staging area
     
   MELAKUKAN CHECKOUT KE SEBUAH COMMIT
    1. Dilakuka untuk mundur beberapa commit
    2. lakukan git log untuk mengetahui hash pd saat commit
    3. ambil hast 7 digit pd commit yg kita ingin masuki
    4. git checkout hast7digit
    5. artinya head akan lepas pd branch,dan head akan mengacu pada commit yg mempunyai hast7digit pd saat kita melakukan git checkout
    6. dalam keadaan ini kita bisa membuat branch baru,mengedit isi file dll
    7. jikakita ingin membuat branch baru maka kita perlu melakukan,membuat branch baru da masuk denga perintahgit checkout brancBaru
    8 . untuk kembali ke posisi semula maka gunakang git branch master
    9. jika ingin menyimpan perubahannya,maka anda harus membuat branch baru untuk menyimpan perubahan dan saat melakukan perubahan branch
        anda akan mendapatkan hash untuk menambahkan pada akhir branch,jika file yang anda rubah mengerjakan baris yang sama terhdap brand master akan 
        menjadi merge conflict,anda harus resolve manual
        
C. GIT REMOTE
perintah yg bisa digunakan
    - git clone namaUrl = untuk mengarahkan folder tersebut aka mengeclone sesuai dengan namaUrl yg ada di github
    - git remote = untuk mengetahui apakah sudah terhubung dengan repo yg ada digithub ,jika keterangan ORIGIN maka sudah terhubung
    - git remote -v = untuk mngetahui remote kita terhubung dengan akun repo github siapa
    - git push = untuk mendorong branch,biasa dilakukan untuk mendorong branck remote agar sejajar dengan branch local,saat branch local mengalamai perubahan
    - git fetch = untuk mengetahui perubahan apa saja yg ada diremote
    - git pull = untuk mengambil perubahan yg ada diremote agar dilocal ikut berubah
    
   MELAKUKAN CLONE
      - Buat folder untuk menampung repo (folder penampung jngan dibuat repo)
      - masuk kedalam repo yg telah diclone
      - 
      - 
    
    aRTINYA REPO KITA DISIMPAN KEDALAM GITHUB 
    jika kita menggunakan git remote artinya kita menduplikat repo kita dan disimpan kedalam github ataupun sebaliknya
    1. KETIKA PADA GITHUB KITA SUDAH MEMPUNYAI REPO,DAN DI KOMPUTER LOCAL KITA BELUM MEMPUNYAI,Maka kita dapat menduplikat repo yang ada digithub dengan cara (Cloning)
    - memuat repo baru pd github
    - pastikan click readme
    - click clone or download
    - pilih yang https copy url nya
    - pilih folder / buat folder di komputer local untuk menyimpan hasil cloning dari repo yang ada digithub
    - git clone namaUrl  artinya repo yg ada digithub kita cloning (membuat kemabaran)
    - buka file di code editor
    - masuk ke folder sesuai yg ada di repo github
    - git remote (untuk mngetahui apakah sudah berhasil clone repo yg ada di github)
    - cek git status ,jika berhasil maka akan menampilkan keteranga UP TO DATE yg artinya branch local sama dengan branch oringin/master(beranch yg ada diremote)
    - jik pada local melakukan perubahan / commit
    - cek git status untuk mngetahui apakah branch pada local atau pd remote sudah sejajar
    - jika belum pd local ketik git push untuk mendorong agar branch yg da diremote sejajar dengan branch local
    - cek status dan graph untuk emmantau perubahan ,dan refresh github
    
2. KETIKA KITA PUNYA REPO DILOCAL DAN KITA INGIN COMMIT DAN MASUKKAN REPO KE DALAM GITHUB (Remote)
- buat folde di local dan jadikan repo 
- buat repo di github 
- pastikan jangan diclick readme nya
- sesuaikan dengan quick setup
- menambahkan remote ke gitbash (sudah ada di quick tip)
- lakukan git fetch untuk mengecek perubahan yg ada di remote

3. KETIKA TERJADI CONFLICK LOCAL DAN REMOTE
    Terjadi jika pada local dan remote melakuka perubahan dibaris yang sama
   - gunakan git fetch untuk mengetahui sudah sampai mana commit yg ada di remote
   - git status untuk mengetahui keterangan
   - git pull untuk menarik perubahan yg ada diremote ke local
   - jika tdk dipull maka pada graph akan melakukan branch,
   - setelah conflick selesai maka gunakan perintah git push agar branch local dan remote sejajar
   
 D. GITHUB PAGES
    Memanfaatkan github untuk menghosting web statis (web yg tdk memilik data base)
  1. buat repo pada github
  2. pada saat membuat repo dibelakang harus diberi nama github.io
  3. tdk usah click readme
  4. buat repo pd local untuk remote repo yg ada digithub
  5. check pd github, bagian setting pilih fitur pages ,lalu ubah none menjadi master/main lalu save ,refresh, maka github akan menampilkan url hostingnya 
  6. Dan jika ingin melakukan perubahan maka,kita commit ke local lalu ketik git push ,agarrepo yg ada digithub akan ikut berubah
  
 F. REMOTE MULTIPLE
      Biasa digunakan untuk kolaborasi team,Agar repo yg ada digithub dilocal dan digithub orang lain yg reponya kita fork sinkron (berintegrasi)
      Misal kasus kita ingin mnengambil repo  orang lain(fork) dan clone ke komputer kita (local) dan di akun github kita
      BERLAKU JIKA REPO SUMBER MELAKUKAN PERUBAHAN,MAKA OTOMATIS REMOTE AKAN MAJU 1 COMMIT DARI REPO LOCAL DAN GITHUB KITA
      - lakukan fork untuk mengambil repo orng lain dan clone ke akun github kita
      - pada local buat  folder (folder saja jngan dibuat repo)
      - ketik git clone urlNamaRepoYgAdaDiGithubKita hasil dari fork
      - setelah file terdownload,ketik ls untuk mengetahui isi folder
      - masuk ke repo cd namaRepo (jika masuk berhasil maka akan masuk ke repo dengan branch master)
      - jika clone berhasil,maka kita cek remote terlebih dahulu
      - ketik git remote , jika remotenya origin maka clone berhasil,karena jika kita clone maka remote secara default kita adalah origin,dan remote mengacu pd akun  github kita
      - ketik git remote -v ,aka mengecek remotenya connect ke akun siapa
      - dan artinya jikakita melakukan perubahan di local ,maka yg akan berubah hnya repo yg ada digithub kita saja,repo aslinya tdk akan berubah
      - JIKA KITA INGIN UP TO DATE DENGAN REPO ASLINYA ( artinya jika repo sumber berubah,repo yg ada digithub dan local kita ikut berubah) kita harus
      - membuat remote yg urlnya ditujukan kepada url repo yg kita fork (repo sumbernya)
      - ketil git remote add namaRemoteSumber(nama terserah) urlRemoteSumber (copas pd github)
      - cek git remote -v , untuk mngetahui remote ke mana saja
      - ketik git fetch namaRemoteSumber untuk mngetahui history commit dari akun sumbernya ,dan agar saat kita graph branch sejajar
      - jika pd repo sumber berubah dan pada repo github ataupun local kita juga ikut berubah,maka gita harus merge git local kita ke git repo sumber (lakukan git fetch namaRemoteSumber untuk mengecek perubahan yg ada direpo sumber)
      - lalu ketik git status untuk mngetahui pesan
      - jika ada perubahan di repo sumber,maka git remote akan berada diatas remote local da github
      - jika ingin remote sejajar, maka 
      - git merge namaRemoteSumber/master (artinya kita akan menggabungkan remote yg ada dilocal dengan remote yg mengacu repo sumber) 
      - local ditandai dengan namaBranch(master) saja, tidak ada nama remotenya
      - agar repo yg ada digithub kita ikut berubah maka kita 
      - ketik git push -u origin master 
    
    
  
    
